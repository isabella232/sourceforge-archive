// ===========================================================================
// Copyright (c) 1996 Mort Bay Consulting Pty. Ltd. All rights reserved.
// $Id$
// ---------------------------------------------------------------------------

package com.mortbay.HTTP.Handler;
import com.mortbay.Base.*;
import com.mortbay.HTTP.*;
import java.io.*;
import java.util.*;


/* --------------------------------------------------------------------- */
/** Filter HttpHandler<p>
 * Filter handler can be used to insert filters into the outputStream
 * of the response generated by subsequent handlers.
 * It is intended to be allow modifications of responses such as: <ul>
 * <li>Wrapping another reply in a look and feel.
 * <li>Expanding tags from a file or forward generated response to add
 * more dynamic content (See HtmlFilter).
 * <li>Modify link paths
 * <li>etc.
 * <ul>
 * It is configured with a PathMap of paths to HttpFilter class names
 * or vector of class names.
 * If the path matches a request, new filter instances are added to the
 * response. These will only be activated if their content types match
 * that of the response (which may be set later).
 * @version $Id$
 * @author Greg Wilkins
 */
public class FilterHandler extends NullHandler
{
    /* ----------------------------------------------------------------- */
    PathMap filterMap = null;
    
    /* ----------------------------------------------------------------- */
    /** Construct a FilterHandler
     * @param filterMap A PathMap mapping paths to be filtered to either
     * the class  name of a HttpFilter or a Vector of class names.
     * If the a request path maps to 1 or more filters, these are added
     * to the HttpResponse in order.
     */
    public FilterHandler(PathMap filterMap)
    {
	this.filterMap = filterMap;

	try{
	    Enumeration k = filterMap.keys();
	    while(k.hasMoreElements())
	    {
		Object filter = filterMap.get(k.nextElement());
		
		if (filter instanceof Vector)
		{
		    Enumeration f = ((Vector)filter).elements();
		    while (f.hasMoreElements())
			newFilter(f.nextElement().toString());
		}
		else
		    newFilter(filter.toString());
	    }
	}
	catch (Exception e){
	    Code.fail("Can't instantiate HttpFilter",e);
	}
    }
    
    /* ----------------------------------------------------------------- */
    /** Handle filters for requests.
     * Add a HttpFilter instance to the response for each matching filter
     */
    public void handle(HttpRequest request,
		       HttpResponse response)
	 throws Exception
    {
	Object filter =
	    filterMap.getLongestMatch(request.getRequestPath());

	if (filter!=null)
	{    
	    if (filter instanceof Vector)
	    {
		Enumeration f = ((Vector)filter).elements();
		while (f.hasMoreElements())
		    response.addObserver(newFilter(f.nextElement().toString()));
	    }
	    else
		response.addObserver(newFilter(filter.toString()));
	}
    }
    
    /* ----------------------------------------------------------------- */
    HttpFilter newFilter(String className)
	 throws ClassNotFoundException,
	ClassCastException,
	IllegalAccessException,
	InstantiationException
    {
	Class filterClass = Class.forName(className);
	HttpFilter filter = (HttpFilter)filterClass.newInstance();
	return filter;
    }
}



