/*
 * $Id$
 * 
 * Copyright (c) 1998-1999 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * This software is the confidential and proprietary information of Sun
 * Microsystems, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Sun.
 * 
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
 * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 * 
 * CopyrightVersion 1.0
 */

package javax.servlet;

import java.io.IOException;

/**
 * Defines a request dispatcher object that receives request from
 * the client and sends them to any resource (such as a servlet, CGI
 * script, HTML file, or JSP file) available on the server. The
 * request dispatcher object is created by the servlet engine and
 * serves as a wrapper around a server resource defined by a
 * particular URL path.
 *
 * <p>The <tt>RequestDispatcher</tt> interface is defined primary
 * to wrap servlets, but a servlet engine can create request
 * dispatcher objects to wrap any type of resource.
 *
 * <p>Request dispatcher objects are created by the servlet engine,
 * not by the servlet developer.
 *
 * @see ServletContext#getRequestDispatcher(java.lang.String)
 */
public interface RequestDispatcher {

    /**
     * Used for forwarding a request from this servlet to another
     * resource on the server. This method is useful when one servlet
     * does preliminary processing of a request and wants to let
     * another object generate the response.
     *
     * <p>The <tt>request</tt> object passed to the target object
     * will have its request URL path and other path parameters
     * adjusted to reflect the target URL path of the target ojbect.
     *
     * <p>You cannot use this method if a <tt>ServletOutputStream</tt>
     * object or <tt>PrintWriter</tt> object has been obtained from
     * the response. In that case, the method throws an
     * <tt>IllegalStateException</tt>
     *
     * @param request the client's request on the servlet
     * @param response the client's response from the servlet
     * @exception ServletException if a servlet exception is thrown by the
     *            target servlet
     * @exception IOException if an I/O Exception occurs
     * @exception IllegalStateException if the ServletOutputStream or a writer
     *            had allready been obtained from the response object
     */
    public void forward(ServletRequest request, ServletResponse response)
	throws ServletException, IOException;

    /**
     * Used for including the content generated by another server
     * resource in the body of a response. In essence, this method
     * enables programmatic server side includes.
     *
     * <p>The request object passed to the target object will reflect
     * the request URL path and path info of the calling request.
     * The response object only has access to the calling servlet's
     * <tt>ServletOutputStream</tt> object or <tt>PrintWriter</tt>
     * object.
     *
     * <p>An included servlet cannot set headers. If the included
     * servlet calls a method that may need to set headers (such as
     * sessions might need to), the method is not guaranteed to work.
     * As a servlet developer, you must ensure that any methods
     * that might need direct access to headers are properly resolved.
     * To ensure that a session works correctly, start the session
     * outside of the included servlet, even if you use session tracking.
     *
     * @param request the client's request on the servlet
     * @param response the client's response from the servlet
     * @exception ServletException if a servlet exception is thrown by the
     *            target servlet
     * @exception IOException if the ServletOutputStream or a writer
     *            had already been obtained from the response object
     */
    public void include(ServletRequest request, ServletResponse response)
	throws ServletException, IOException;
}








