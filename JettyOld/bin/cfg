#!/bin/sh
# Copyright (c) 1996- Mort Bay Consulting Pty. Ltd. <mortbay@ozemail.com.au>
# Released under GPL 2.0
# $Id$

RCSEXISTS=no
[ -d RCS ] && RCSEXISTS=yes

if [ "$CFG_REPOSITORY" = "" ]
then
   [ -d /home/repository ] && CFG_REPOSITORY=/home/repository
   [ "$CFG_REPOSITORY" = "" -a -d /usr/local/lib/cfg ] && \
   	CFG_REPOSITORY=/usr/local/lib/cfg
   [ "$CFG_REPOSITORY" = "" ] && CFG_REPOSITORY=/usr/local/repository
fi

CFG=$CFG_REPOSITORY


# =====================================================================
# Define utility functions
# ---------------------------------------------------------------------
usage()
{
    cat << EOF >&2
Usage -
    cfg help                        # usage and example
    cfg example                     # show example
    cfg ls                          # list files
    cfg info [flags]                # info on all files
    cfg status [flags]              # info on locked, modified files
    cfg [-n] project <name>         # create a new project
    cfg [-n] workspace <name>       # create a project workspace
    cfg [-n] add [files..]          # add files and current dir to project
    cfg [-n] rm [files..]           # remove files from configuration
    cfg [-n] recover [files..]      # recover removed files from configuration
    cfg [-n] rename file newname    # Rename a file in the repository
    cfg [-n] co [flags][files..]    # checkout hierarchy 
    cfg [-n] lock [flags][files..]  # lock hierarchy
    cfg [-n] clean [flags][files..] # removed unlocked and unmodified files
    cfg [-n] ci [flags][files..]    # checkin
    cfg [-n] tag <tag> [flags][files..] # tag
    cfg [-n] rcs flags ...          # any rcs command 
    cfg rcs                         # create or delete RCS links

    + -n display commands only
    + current directory within workspace is used for all commands to select 
      directory within project.
    + project repository is /usr/local/lib/cfg
    + if no files are provided . is used
    + if a file is a directory cfg is applied recursively
EOF
    exit 1
}

# ---------------------------------------------------------------------
example()
{
    cat << EOF >&2

Example:
      cfg project MyProject
      cfg workspace MyProject
      cd MyProject
      mkdir MyDir OtherDir
      cd MyDir
      echo 'main(){}' > foo.c
      echo 'void bar(){}' > bar.c
      cfg add *.c
      cd ../OtherDir
      cfg add
      cd ..
      cfg clean
      cfg co
      cd MyDir
      cfg lock
      echo 'modify(){}' >> foo.c
      cd ..
      cfg status
      cfg ci -mDemo
      cfg tag DEMO
      cfg co -rDEMO MyDir/foo.c
      cd .. ; rm -fr MyProject
      cfg workspace MyProject/MyDir
      cd MyProject/MyDir
      cfg info -rDEMO
      cd ../.. ; rm -fr MyProject
      cfg project
      rm -fr $CFG/MyProject
EOF
    exit 1
}


# ---------------------------------------------------------------------
formatStatus()
{
    FILE=$1
    REV=$2
    shift
    shift

    LOCK=
    if [ "$1" = '::' ]
    then
        shift
    else
        LOCK=$1
	LREV=$2
	[ "$LREV" != "$REV" ] && LOCK="$LOCK($LREV)"
	LOCK=`echo $LOCK | sed 's/://g'`
	shift
	shift
        shift
    fi

    SYMREV=$REV
    if [ $# -gt 1 ]
    then
        [ "$2" = "$REV" ] && SYMREV="$1$SYMREV"
        shift
	shift
    fi

    if [ -f $FILE ]
    then
	if [ ` rcsdiff -q $FILE | wc -l ` -gt 0 ]
	then
	    printf "%-42s %-16s %-10s modified\n" "$FILE" "$SYMREV" "$LOCK"
	else
	    printf "%-42s %-16s %-10s\n" "$FILE" "$SYMREV" "$LOCK"
	fi
    else
	printf "%-42s %-16s %-10s missing\n" "$FILE" "$SYMREV" "$LOCK"
    fi
}

# ---------------------------------------------------------------------
applyToRCSFiles()
{
    FILELIST=$1   # file list is single first arg
    #echo '"'${FILELIST}'"'
    shift

    OPTIONS=
    DIRS=
    FILES=
    for i in $FILELIST
    do
        case $i in
          -*) OPTIONS="$OPTIONS $i"
          ;;
          *) 
	      if [ -d $i ]
	      then 
    		DIRS="$DIRS $i"
		#echo Apply $* $OPTIONS to Directory $i

                find $i -name RCS -type l -print -prune | while read RCS
                do  
	            F=`find $RCS -follow \( -name REMOVED -prune \) -o \( -name '*,v' -o -name '.*,v' \) -print | sed -e's/RCS.//' -e's/,v$//'`
	            [ "$F" != "" ] && eval $* $OPTIONS $F
                done

	      else
		FILES="$FILES $i"
	        eval $* $OPTIONS $i
	      fi
	  ;;
	esac
    done
  
    [ "$FILES$DIRS" = "" ] && applyToRCSFiles . $* $OPTIONS 
}



# =====================================================================
# Check usage
# ---------------------------------------------------------------------
if [ $# = 0 ]
then
    usage
fi
   
BASE=`pwd`

CMD=
if [ $1 = '-n' ]
then
    CMD=echo
    shift
fi

OP=$1
shift


# =====================================================================
# Handle Meta Commands
# ---------------------------------------------------------------------
case $OP in
  # -------------------------------------------------------------------
  project )
    if [ $# = 0 ]
    then
        ls -1 $CFG
    else
        [ -d $CFG/$1 ] || mkdir $CFG/$1 || exit 1
        echo created project $1
    fi
    exit 0
    ;;

  # -------------------------------------------------------------------
  workspace )
    if [ $# = 0 ]
    then
        ls -1 $CFG
    else
        DIR=$1
	TOP=`expr $DIR : '\([^/]*\)'`

        [ -d $CFG/$DIR ] || { echo "No such directory $DIR in project $TOP" >&2 ; exit 1 ; }
        
        [ -d $DIR ] || $CMD mkdir -p $DIR
        $CMD echo $TOP > $TOP/.workspace
        echo created workspace $1
    fi
    exit 0
    ;;

  # -------------------------------------------------------------------
  add | rm | recover | rename | info | status | ci | co | lock | clean | tag | rcs | ls)
    ;;

  # -------------------------------------------------------------------
  example )
    example
    ;;

  # -------------------------------------------------------------------
  usage )
    usage
    ;;

  # -------------------------------------------------------------------
  *)
    usage
    ;;
esac


# =====================================================================
# Find workspace file and build STUB
# ---------------------------------------------------------------------
STUB=.
while [ ! -f .workspace ]
do
    WD=`pwd`
    if [ $STUB = "." ]
    then
    
	STUB=`basename $WD`
    else
	STUB=`basename $WD`/$STUB
    fi
    cd ..

    if [ "`pwd`" = "/" ]
    then
	echo can not find workspace >&2
	exit 1
    fi
done
cd $BASE

# =====================================================================
# Set WORKSPACE directory
# ---------------------------------------------------------------------
if [ $STUB = '.' ]
then
    WORKSPACE=$BASE
else
    WORKSPACE=`expr "$BASE" : "\(.*\)/$STUB\$" `
fi


# =====================================================================
# Set WORKSPACE directory
# ---------------------------------------------------------------------
PROJECT=`cat $WORKSPACE/.workspace`

#echo Directory $STUB in Workspace $WORKSPACE from Project $PROJECT

# =====================================================================
# Setup RCS links
# ---------------------------------------------------------------------
if [ $OP != add ]
then
    cd $CFG/$PROJECT
    find $STUB -name RCS -type d -print -prune | while read RCS
    do
        RDIR=`dirname $WORKSPACE/$RCS`
        [ -d $RDIR ] || mkdir -p $RDIR
        [ -d $RDIR/RCS ] || ln -s $CFG/$PROJECT/$RCS $RDIR
    done
fi
cd $BASE

# =====================================================================
# Handle other commands
# ---------------------------------------------------------------------
case $OP in
  # -------------------------------------------------------------------
  add )
    [ -d $CFG/$PROJECT/$STUB/RCS ] || $CMD mkdir -p $CFG/$PROJECT/$STUB/RCS
    
    if [ $# -gt 0 ]
    then
        [ "$RCSEXISTS" != yes ] && ln -s $CFG/$PROJECT/$STUB/RCS RCS
        $CMD ci -t- -u $*
        [ "$RCSEXISTS" != yes ] && rm RCS
    fi 
    ;;

  # -------------------------------------------------------------------
  rm )
    [ $# -gt 0 ] && for i in $*
    do
        rm -f $i
	[ -d RCS/REMOVED ] || mkdir RCS/REMOVED
	mv RCS/$i,v RCS/REMOVED
    done
    ;;
    
  # -------------------------------------------------------------------
  recover )
    [ $# -gt 0 ] && for i in $*
    do
	[ -f RCS/REMOVED/$i,v ] && mv RCS/REMOVED/$i,v RCS
        co $i
    done
    ;;

  # -------------------------------------------------------------------
  rename )
      FROM=$1
      TO=$2
      FROMRCS=`dirname $FROM`/RCS/`basename $FROM`,v
      TORCS=`dirname $TO`/RCS/`basename $TO`,v
      TOREMOVED=`dirname $TO`/RCS/REMOVED/`basename $TO`,v
      [ $# != 2 ] && usage
      if [ -f $TORCS -o -f $TO ]
      then
	  echo "ERROR: $TO already exists"
	  exit 1
      fi
      if [ -f $TOREMOVED ]
      then
	  echo "ERROR: $TO would eclipse removed file"
	  exit 1
      fi
      if [ ! -f $FROMRCS ]
      then
	  echo "ERROR: $FROM does not exist"
	  exit 1
      fi
      if [ -f $FROM ]
      then
	  mv $FROM $TO
      fi
      mv $FROMRCS $TORCS
  ;;
  # -------------------------------------------------------------------
  info )
      applyToRCSFiles "$*" $CMD rlog
      ;;

  # -------------------------------------------------------------------
  status )
    find . -name RCS -type l -print -prune | sed 's|^./||' |while read RCS
    do   
	DIR=` dirname $RCS `
	FILES=`find $RCS -follow \( -name REMOVED -prune \) -o \( -name '*,v' -o -name '.*,v' \) -print | sed -e's/RCS.//' -e's/,v$//'`
	[ "$FILES" != "" ] && for file in $FILES
	do
	    STATUS=`$CMD rlog -h $file | sed \
		-e'/RCS file:/d' \
		-e'/keyword substitution:/d' \
		-e'/total revisions:/d' \
		-e'/=====/d' \
		-e'/branch:/d' \
		-e'/access list:/d' \
		-e'/locks:/d' \
		-e's|.*symbolic names:.*|::|'\
		-e"s|head: |	|" \
		-e"s|Working file: ||" | tail +2 `
	    formatStatus $STATUS
	done 

	find "$DIR" \( ! -name "$DIR" -type d -prune \) -o \( \
	    -name '*.[hcC]' -o \
	    -name '*.[hcsp][hcl]' -o \
	    -name '*.[chd][pty][pmn]' -o \
	    -name '*.[hjp][tae][mvr][la]' -o \
	    -name '*.jhtml' -o \
	    -name '[mM]akefile' \) \
	-print | sed 's|^./||' | \
	while read file
	do
	    RCSFILE=`dirname $file`/RCS/`basename $file`,v
	    [ -f $RCSFILE ] || printf "%-42s NOT UNDER CONFIGURATION CONTROL\n" "$file"
	done

	[ -d $DIR/RCS/REMOVED ] && ls $DIR/RCS/REMOVED | while read file
	do
	    file=`basename $file ,v`
	    printf "%-42s REMOVED\n" "$DIR/$file"
	done
    
    done
    ;;

  # -------------------------------------------------------------------
  ls )
    find . -follow \( -name '*,v' -o -name '.*,v' \) -print | egrep ',v' | sed -e's/,v//' -e's/RCS.//'
    ;;

  # -------------------------------------------------------------------
  ci )
    if  expr " $*" : '.* -m.*' > /dev/null
    then
	applyToRCSFiles "$*" $CMD ci -u
    else
	echo "Enter check-in message (end with ctrl-D)"
	cat > /tmp/rrM$$
	applyToRCSFiles "$*" $CMD ci -u -m\"\`cat /tmp/rrM$$\`\"
        rm -f /tmp/rrM$$
    fi
    ;;

  # -------------------------------------------------------------------
  co )
      applyToRCSFiles "$*" $CMD co 
      ;;

  # -------------------------------------------------------------------
  lock )
      applyToRCSFiles "$*" $CMD co -l
      ;;

  # -------------------------------------------------------------------
  clean )
      applyToRCSFiles "$*" $CMD rcsclean -u
      ;;

  # -------------------------------------------------------------------
  rcs )
      [ "$*" = "" ] || applyToRCSFiles "$*" $CMD rcs
      ;;

  # -------------------------------------------------------------------
  tag )
    TAG=$1
    shift
    applyToRCSFiles "$*" $CMD rcs -N$TAG: 
    ;;
    
esac

cd $BASE

[ $OP = rcs -a "$RCSEXISTS" = no ] || \
[ $OP != rcs -a "$RCSEXISTS" = yes ] || \
find . -name RCS -type l -exec rm -f {} \;


