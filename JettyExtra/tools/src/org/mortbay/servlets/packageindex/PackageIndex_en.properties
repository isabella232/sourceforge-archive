#
# Note: in the following entries, paths, ignore, and doco type paths can all
# have multiple values, seperated by ",", ";" or ":"
#

# Whether or not to have the links to the doco be file: links (assuming the
# clients can see the same files the server can), or links back to the
# webserver. If it is back to the webserver, the operator will need to
# configure a FileHandler to serve the files correctly. The links on the
# webserver will be as they are found on the webservers file system, e.g. if
# you have /usr/local/java/jd/1.3/javadoc/index.html, on the webserver it
# will be
# http://localhost:8088/usr/local/java/jd/1.3/javadoc/index.html.
# Alternatively, set the httpIndexPrefix and it will prefix the files system
# path on the webserver. Eg: if httpIndexPrefix=Prefix/, then
# http://localhost:8088/Prefix/usr/local/java/jd/1.3/javadoc/index.html.
mapToFile:			false
httpIndexPrefix: 

# Border width of tables. Sometimes, with many versions or long names,
# invisible tables are not helpful.
tocTableBorderWidth:		4

# Sections
# This describes the different type of doco the servlet will catalogue. These
# are fairly arbitrary. At least 1 is required. The name of the section
# (eg. jd) is used to indicate the paths to search for under the
# individual package specifications later. The value here is the display name
# used on the pages for that type of documentation.
sections.jd:		Javadoc
sections.ref:		Mauals

# Package Specs.
# Each package spec can have the following fields:
#   paths: (required) Where to look for the package. The directory with the
# name of the package will be searched for under this directory. If the scan
# property is also specified, this property should not contain paths listed
# in that property.
#   versioning: The number of intermediate directories underneath the package
# directory before doco should be searched for. This is to handle where a
# package will have an arbitrary number of directories under itself for
# multiple versions of the package. E.g. In package jdk, in /usr/local (where
# paths=/usr/local) there may be sol2/1.2.2 and linux/1.2.2, thus versioning
# should be set to 2. The servlet assumes that the last directory is the
# major version directory (i.e the above is assumed, rather than 1.2.2/linux
# and 1.2.2/sol2). If set to 0, it is assumed there is only 1 installation.
#   description: The display name describing the package (don't make it too
# long, it clutters the display)
#   ignore: "versioning" intermediary directories that should be ignored and
# passed over. Use this to handle cases where you may have symlinks pointing
# to the one version but only want it to show up under 1 name.
# 
# In addition, packages must specify the path(s) to search for documents of
# the type(s) specified in "sections" above; Not all sections need to be
# specified, but at least 1 is a good idea, otherwise the package will have
# no doco links. E.g. If you specified "sections.adoc: Doc Type A" then
# packages with doco of that type should have a field called "adoc" with the
# path to the Doc Type A file or directory (within a single version). Since
# different versions of a package might have different paths to their
# documentation, you can specify a list of paths. Since many packages will
# have similar paths, versioning, and doc paths, it is a good idea to use
# defaults such as pkgs.*.paths. Don't use defaults like "*.paths" or paths
# will show up as a doco type section!

# defaults
pkgs.*.paths:			..
pkgs.*.versioning:		1
pkgs.*.jd:			docs/api/index.html:doc/api/index.html:javadoc/index.html:api/index.html
pkgs.*.ref:			docs/index.html:index.html:doc/index.html
pkgs.*.ignore:			current:CURRENT:DEFAULT:default

#
# packages
#
# /usr/local/java/$PKG/$VERSION
#
pkgs.jdk.description:		Jdk

# The above jdk will hopefully be found in the following list of directories
# (remember versioning is by default set to 1, so it will expect
# jdk/X.X). The scan directories are all searched for any packages that match
# the above patterns. I.e. every subdirectory is treated as a package name
# and checked - if you specify a long list here or a directory with many
# subdirectories it can get rather slow!
scan:                   /usr/local/java

#
# JettyExtra stuff
#
pkgs.ftp.description:   Jetty: FTP Client
pkgs.jmx.description:   Jetty: JMX interface for Jetty
pkgs.nbio.description:  Jetty: Non-Blocking IO lib
pkgs.sasl.description:  Jetty: SASL Auth extension
pkgs.tools.description: Jetty: Extra Generic tools
pkgs.ftp.versioning:    0
pkgs.jmx.versioning:    0
pkgs.nbio.versioning:   0
pkgs.sasl.versioning:   0
pkgs.tools.versioning:  0
