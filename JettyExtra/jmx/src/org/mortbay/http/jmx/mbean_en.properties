
HttpServer = \
Jetty core HTTP Server. 

HttpServer.started   = True if any of the components of Jetty Server have been started and are still running.
HttpServer.start()   = Start the Jetty Server and all registered listeners, contexts and logs.
HttpServer.stop()   = Stop the Jetty Server and all registered listeners, contexts and logs.
HttpServer.destroy()   = Destroy the Jetty Server and all registered listeners, contexts and logs.

HttpServer.addListener(java.lang.String)    = Create and add a new HttpListener.
HttpServer.addListener(java.lang.String)[0] = listenerClass:The Listener classname or null for the default HttpListener class.

HttpServer.addHostAlias(java.lang.String,java.lang.String)    = Define a virtual host alias
HttpServer.addHostAlias(java.lang.String,java.lang.String)[0] = virtualHost:Known host name or IP
HttpServer.addHostAlias(java.lang.String,java.lang.String)[1] = alias:Alias host name or IP

HttpServer.addContext(java.lang.String,java.lang.String)    = Create and add a new context.
HttpServer.addContext(java.lang.String,java.lang.String)[0] = virtualHost:Virtual host name. null for all hosts.
HttpServer.addContext(java.lang.String,java.lang.String)[1] = contextPath:The path specification for the context.

HttpServer.requestlog = The RequestLog.

HttpServer.statsOn = True if statistics collection is turned on.
HttpServer.statsReset() = Reset statistics.
HttpServer.connections = Number of connections accepted by the server since statsReset() called. Undefined if setStatsOn(false).
HttpServer.connectionsOpen = Number of connections currently open that were opened since statsReset() called. Undefined if setStatsOn(false).
HttpServer.connectionsOpenMax = Maximum number of connections opened simultaneously since statsReset() called. Undefined if setStatsOn(false).
HttpServer.connectionsDurationAve = Sliding average duration in milliseconds of open connections since statsReset() called. Undefined if setStatsOn(false).
HttpServer.connectionsDurationMax = Maximum duration in milliseconds of an open connection since statsReset() called. Undefined if setStatsOn(false).
HttpServer.connectionsRequestsAve = Sliding average number of requests per connection since statsReset() called. Undefined if setStatsOn(false).
HttpServer.connectionsRequestsMax = Maximum number of requests per connection since statsReset() called. Undefined if setStatsOn(false).
HttpServer.errors = Number of errors since statsReset() called. Undefined if setStatsOn(false). An error is a request that resulted in an exception being thrown by the handler.
HttpServer.requests = Number of requests since statsReset() called. Undefined if setStatsOn(false).
HttpServer.requestsActive = Number of requests currently active. Undefined if setStatsOn(false).
HttpServer.requestsActiveMax = Maximum number of active requests since statsReset() called. Undefined if setStatsOn(false).
HttpServer.requestsDurationAve = Average duration of request handling in milliseconds  since statsReset() called. Undefined if setStatsOn(false).
HttpServer.requestsDurationMax = Get maximum duration in milliseconds of request handling since statsReset() called. Undefined if setStatsOn(false).


HttpListener = Listener for HTTP connections.
HttpListener.defaultScheme = The protocol expected for connections to this listener.
HttpListener.lowOnResources = True if listener is low on resources.
HttpListener.outOfResources = True if listener is out of resources.
HttpListener.integralPort = Port to redirect to for integral connections. 0 if not supported.
HttpListener.integralScheme = Protocol to use for integral redirections.
HttpListener.confidentialPort = Port to redirect to for confidential connections. 0 if not supported.
HttpListener.confidentialScheme = Protocol to use for confidential redirections.

SocketListener = HttpListener for normal Socket connections
SocketListener.host = The host or IP interface to listen on. Null or 0.0.0.0 is interpreted as all known interfaces.
SocketListener.port = The port to listen on. 0 is interpreted as any free port.
SocketListener.lowResourcePersistTimeMs = Time in ms to persist idle connections if low on resources.

SocketChannelListener = HttpListener using nio nonblocking SocketChannels for idle connections.
SocketChannelListener.lowOnResources = True if listener is low on resources.
SocketChannelListener.outOfResources = True if listener is out of resources.
SocketChannelListener.host = The host or IP interface to listen on. Null or 0.0.0.0 is interpreted as all known interfaces.
SocketChannelListener.port = The port to listen on. 0 is interpreted as any free port.
SocketChannelListener.maxReadTimeMs = The maximum time in milliseconds that a read can be idle.
SocketChannelListener.lingerTimeSecs = The maximum time in seconds that a connection lingers during close handshaking.

HttpContext=A HTTP Context, which is a collection of HttpHandlers with their resources and configurations. Changes made to this MBean are not persisted.
HttpContext.contextPath            = The URL prefix of this context.
HttpContext.classPath              = The path to load classes for this context from.
HttpContext.classLoader            = The classloader for this context. If both the class path and the class loader are set, \
                                        then the classloader is used as the parent loader for a context loader initialized on the classpath. \
                                        This attribute always returns the actual classloader used for the context.
HttpContext.realm                  = The name of the security realm for the context.
HttpContext.redirectNullPath       = If true, requests to /contextpath are redirected to /contextpath/
HttpContext.resourceBase           = The file or URL to use as a prefix to all resource lookups within the context.
HttpContext.servingResources       = If true, a ResourceHandler is serving static resources from the context resource base.
HttpContext.hosts                  = A list of virtual host aliases that this context is registered against.
HttpContext.handlers               = A list of handlers in this context.
HttpContext.logSink = The LogSink for the requestLog.
HttpContext.statsOn = True if statistics collection is turned on.
HttpContext.destroy() = Destroy a stopped HttpContext and remove it from the HttpServer.
HttpContext.statsReset() = Reset statistics.
HttpContext.requests = Number of requests since statsReset() called. Undefined if setStatsOn(false).
HttpContext.responses1xx = Number of responses with 1xx status (Informal) since statsReset() called. Undefined if setStatsOn(false).
HttpContext.responses2xx = Number of responses with 2xx status (Success) since statsReset() called. Undefined if setStatsOn(false).
HttpContext.responses3xx = Number of responses with 3xx status (Redirection) since statsReset() called. Undefined if setStatsOn(false).
HttpContext.responses4xx = Number of responses with 4xx status (Client Error) since statsReset() called. Undefined if setStatsOn(false).
HttpContext.responses5xx = Number of responses with 5xx status (Server Error) since statsReset() called. Undefined if setStatsOn(false).

HttpContext.setInitParameter(java.lang.String,java.lang.String)   =Set an context initialization parameter.
HttpContext.setInitParameter(java.lang.String,java.lang.String)[0]=name:The name of the parameter.
HttpContext.setInitParameter(java.lang.String,java.lang.String)[1]=value:The value of the parameter.
HttpContext.getInitParameter(java.lang.String)   =Get a context initialization parameter.
HttpContext.getInitParameter(java.lang.String)[0]=name:The name of the parameter.
HttpContext.getInitParameterNames()=Get a list of initialization parameter names.
HttpContext.setAttribute(java.lang.String,java.lang.String)   =Set a context attribute.
HttpContext.setAttribute(java.lang.String,java.lang.String)[0]=name:The attribute name.
HttpContext.setAttribute(java.lang.String,java.lang.String)[1]=value:The attribute value.
HttpContext.getAttribute(java.lang.String)   =Get a context attribute
HttpContext.getAttribute(java.lang.String)[0]=name:The attribute name.
HttpContext.getAttributeNames()=Get a list of attribute names.
HttpContext.removeAttribute(java.lang.String)   =Remove a context attribute.
HttpContext.removeAttribute(java.lang.String)[0]=name:The attribute name.
HttpContext.addHttpHandler(int,org.mortbay.http.HttpHandler)    = Add a HttpHandler instance to the context. When a request is serviced by the context, \
                                                                 each handler is called in order until it is handled.
HttpContext.addHttpHandler(int,org.mortbay.http.HttpHandler)[0] = index:The index within the context to insert the handler at.
HttpContext.addHttpHandler(int,org.mortbay.http.HttpHandler)[1] = handler:The HttpHandler instance to add.
HttpContext.getHttpHandler(int)       = Get a context HttpHandler.
HttpContext.getHttpHandler(int)[0]    = index:The index  of the handler within the context.
HttpContext.removeHttpHandler(int)    = Remove a context HttpHandler.
HttpContext.removeHttpHandler(int)[0] = index:The index  of the handler within the context.
HttpContext.setMimeMapping(java.lang.String,java.lang.String)   = Set a mime mapping by name extension.
HttpContext.setMimeMapping(java.lang.String,java.lang.String)[0]= extension:The name extension to map.
HttpContext.setMimeMapping(java.lang.String,java.lang.String)[1]= mimetype:The MIME type of resources with the extension.

NCSARequestLog                  = HTTP Request logger providing the normal or extended NCSA format.
NCSARequestLog.filename         = Name of the file to log to. If the name container "yyyy_mm_dd" then the log file will be \
                                  rolled over and dated every local midnight.
NCSARequestLog.datedFilename    = The current dated filename in use.
NCSARequestLog.logDateFormat    = Date format to use in the log.
NCSARequestLog.logTimeZone      = Timezone to use for formatting log dates.
NCSARequestLog.retainDays       = Days to return old log file. If 0, files are kept forever.
NCSARequestLog.extended         = If true, use the extended NCSA format.
NCSARequestLog.append           = If true append to existing log files, else rename them.